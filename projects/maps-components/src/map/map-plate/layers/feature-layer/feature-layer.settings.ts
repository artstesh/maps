import Style, { StyleFunction } from 'ol/style/Style';
import { IdGenerator } from '../../../common/id.generator';

/**
 * A layer that is responsible for showing and styling main features on the map, such as markers and polygons
 */
export class FeatureLayerSettings {
  /**
   * The identifier of the field, it is autogenerated by default, but can be set manually
   */
  name: string = IdGenerator.get();
  /**
   * The priority of showing - layers with higher zIndex cover others in case of collisions
   */
  zIndex: number = 1;
  /**
   The maximum view zoom level (inclusive) at which this layer will be visible.

   @type {number}
   @default 19
   */
  maxZoom: number = 19;
  /**
   The minimum view zoom level (exclusive) at which this layer will be visible.

   @type {number}
   */
  minZoom: number = 0;
  /**
   * The styling definition of layer's features. The easiest way is to use {@link PolygonStyleHelper},{@link MarkerStyleHelper}
   */
  style?: Style | StyleFunction;

  /**
   * Copies the given FeatureLayerSettings object
   *
   * @param {FeatureLayerSettings} model - The FeatureLayerSettings object to be copied
   * @returns {FeatureLayerSettings} - A copy of the FeatureLayerSettings object
   */
  public static copy(model: FeatureLayerSettings): FeatureLayerSettings {
    const result = new FeatureLayerSettings();
    result.name = model.name;
    result.maxZoom = model.maxZoom;
    result.minZoom = model.minZoom;
    result.zIndex = model.zIndex;
    result.style = model.style;
    return result;
  }

  /**
   * Sets the z-index value for the FeatureLayerSettings object.
   *
   * @param {number} zIndex - The new z-index value.
   * @return {FeatureLayerSettings} - The updated FeatureLayerSettings object.
   */
  setZIndex(zIndex: number): FeatureLayerSettings {
    return FeatureLayerSettings.copy({ ...this, zIndex });
  }

  /**
   * Sets the name of the FeatureLayerSettings.
   *
   * @param {string} name - The name to set for the FeatureLayerSettings.
   *
   * @return {FeatureLayerSettings} - The updated FeatureLayerSettings object with the new name.
   */
  setName(name: string): FeatureLayerSettings {
    return FeatureLayerSettings.copy({ ...this, name });
  }

  /**
   * Sets the maximum zoom level for the FeatureLayerSettings.
   *
   * @param {number} maxZoom - The maximum zoom level.
   * @return {FeatureLayerSettings} - The updated FeatureLayerSettings object.
   */
  setMaxZoom(maxZoom: number): FeatureLayerSettings {
    return FeatureLayerSettings.copy({ ...this, maxZoom });
  }

  /**
   * Sets the minimum zoom level for the feature layer.
   *
   * @param {number} minZoom The minimum zoom level to be set.
   * @returns {FeatureLayerSettings} The updated feature layer settings object.
   */
  setMinZoom(minZoom: number): FeatureLayerSettings {
    return FeatureLayerSettings.copy({ ...this, minZoom });
  }

  /**
   * Sets the style for the FeatureLayerSettings object.
   *
   * @param {Style | StyleFunction} style - The new style to set. It can be either a Style object or a StyleFunction.
   * @return {FeatureLayerSettings} - The updated FeatureLayerSettings object with the new style.
   */
  setStyle(style: Style | StyleFunction): FeatureLayerSettings {
    return FeatureLayerSettings.copy({ ...this, style });
  }

  /**
   * Checks if the given FeatureLayerSettings object is identical to the current object.
   *
   * @param {FeatureLayerSettings} model - The FeatureLayerSettings object to compare with.
   * @return {boolean} - Returns true if the given object is identical to the current object, otherwise false.
   */
  public isSame(model: FeatureLayerSettings): boolean {
    if (this.maxZoom !== model.maxZoom) return false;
    if (this.minZoom !== model.minZoom) return false;
    if (this.zIndex !== model.zIndex) return false;
    if (this.name !== model.name) return false;
    if (this.style !== model.style) return false;
    return true;
  }
}
